"""
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.
"""
# if s is not a palindrome, all a's are one subsequence and all b's are one subsequence. So delete each and the string is empty.
# thus, if s is palindrome, ans is 1, if not, ans 2

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        def isPalindrome(st):
            rev_s = s[::-1]
            if s==rev_s:
                return True
            return False
        if isPalindrome(s):
            return 1
        return 2
